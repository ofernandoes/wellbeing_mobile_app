// lib/daily_checkin_screen.dart

import 'package:flutter/material.dart';
import 'package:wellbeing_mobile_app/theme/app_colors.dart';
import 'package:intl/intl.dart';
// ----------------------------------------------------
// CRITICAL FIXES: Add Imports for Model and Service
import 'package:wellbeing_mobile_app/models/daily_checkin.dart';
import 'package:wellbeing_mobile_app/services/checkin_service.dart';
// ----------------------------------------------------

class DailyCheckinScreen extends StatefulWidget {
  // Existing checkin passed in if editing an existing entry
  final DailyCheckin? checkin; 

  const DailyCheckinScreen({super.key, this.checkin});

  @override
  State<DailyCheckinScreen> createState() => _DailyCheckinScreenState();
}

class _DailyCheckinScreenState extends State<DailyCheckinScreen> {
  // State variables for the check-in form
  int _moodScore = 3; // Default to neutral
  final TextEditingController _noteController = TextEditingController();
  final List<String> _selectedActivities = [];
  final CheckinService _checkinService = CheckinService(); // Initialize the service

  @override
  void initState() {
    super.initState();
    // If we are editing an existing checkin, populate the state
    if (widget.checkin != null) {
      _moodScore = widget.checkin!.moodScore;
      _noteController.text = widget.checkin!.note;
      _selectedActivities.addAll(widget.checkin!.activities);
    }
  }

  // Helper method to save or update the check-in
  void _saveCheckin() async {
    // 1. Get the current user ID (handled by CheckinService internally, but good for context)
    // For this mock, we will use a placeholder
    const String userIdPlaceholder = 'ofernandoes-test-user-id'; // Replace with actual user ID logic if outside service

    // 2. Create the DailyCheckin object
    final DailyCheckin newOrUpdatedCheckin = DailyCheckin(
      // CRITICAL FIX: Use the constructor correctly
      id: widget.checkin?.id, // Keep the ID if updating
      userId: userIdPlaceholder, 
      date: widget.checkin?.date ?? DateTime.now(), // Keep original date if updating, otherwise use now
      moodScore: _moodScore,
      note: _noteController.text.trim(),
      activities: _selectedActivities,
    );

    try {
      if (widget.checkin == null) {
        // Saving a NEW checkin
        await _checkinService.addCheckin(newOrUpdatedCheckin);
      } else {
        // Updating an EXISTING checkin
        // CRITICAL FIX: Called the correct method on the service instance
        await _checkinService.updateCheckin(newOrUpdatedCheckin); 
      }

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Check-in ${_getStatusText()} successfully!')),
        );
        Navigator.pop(context, true); // Pop back and indicate success
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to ${_getStatusText()}: $e')),
        );
      }
    }
  }
  
  // Helper to determine status text for SnackBar
  String _getStatusText() {
    return widget.checkin == null ? 'saved' : 'updated';
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.checkin == null ? 'New Daily Check-in' : 'Edit Check-in'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            // --- 1. MOOD RATING ---
            const Text(
              '1. How are you feeling right now?',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            _buildMoodRatingSelector(),
            const SizedBox(height: 30),

            // --- 2. ACTIVITIES ---
            const Text(
              '2. What did you do today?',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            _buildActivitySelector(),
            const SizedBox(height: 30),

            // --- 3. NOTE ---
            const Text(
              '3. Add a quick note (Optional)',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _noteController,
              decoration: InputDecoration(
                hintText: 'e.g., "Feeling great after my run!"',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10.0),
                  borderSide: BorderSide.none,
                ),
                filled: true,
                fillColor: AppColors.secondary,
              ),
              maxLines: 4,
            ),
            const SizedBox(height: 40),

            // --- SAVE BUTTON ---
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: _saveCheckin,
                icon: Icon(widget.checkin == null ? Icons.save : Icons.update, color: Colors.white),
                label: Text(
                  widget.checkin == null ? 'Save Check-in' : 'Update Check-in',
                  style: const TextStyle(fontSize: 18, color: Colors.white),
                ),
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppColors.primaryColor,
                  padding: const EdgeInsets.symmetric(vertical: 15),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Widget to display and select the mood score
  Widget _buildMoodRatingSelector() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceAround,
      children: List.generate(5, (index) {
        final score = index + 1;
        final isSelected = _moodScore == score;
        return GestureDetector(
          onTap: () {
            setState(() {
              _moodScore = score;
            });
          },
          child: Column(
            children: [
              Container(
                width: 50,
                height: 50,
                decoration: BoxDecoration(
                  color: isSelected ? AppColors.accent : AppColors.secondary,
                  shape: BoxShape.circle,
                  border: Border.all(
                    color: isSelected ? AppColors.primaryColor : Colors.transparent,
                    width: 3,
                  ),
                ),
                child: Center(
                  child: Text(
                    score.toString(),
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: isSelected ? AppColors.primaryColor : AppColors.textDark,
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 4),
              Text(
                _getMoodLabel(score),
                style: TextStyle(
                  fontSize: 12,
                  color: isSelected ? AppColors.primaryColor : AppColors.textSubtle,
                ),
              ),
            ],
          ),
        );
      }),
    );
  }

  // Widget to display and select activities
  Widget _buildActivitySelector() {
    return Wrap(
      spacing: 10.0,
      runSpacing: 10.0,
      children: checkinActivities.map((activity) {
        final label = activity['label'] as String;
        final isSelected = _selectedActivities.contains(label);
        return FilterChip(
          label: Text(label),
          selected: isSelected,
          onSelected: (bool selected) {
            setState(() {
              if (selected) {
                _selectedActivities.add(label);
              } else {
                _selectedActivities.remove(label);
              }
            });
          },
          backgroundColor: AppColors.secondary,
          selectedColor: AppColors.accent,
          labelStyle: TextStyle(
            color: isSelected ? AppColors.primaryColor : AppColors.textDark,
          ),
          checkmarkColor: AppColors.primaryColor,
        );
      }).toList(),
    );
  }

  // Helper function to get the descriptive mood label
  String _getMoodLabel(int score) {
    switch (score) {
      case 1:
        return 'Terrible';
      case 2:
        return 'Bad';
      case 3:
        return 'Okay';
      case 4:
        return 'Good';
      case 5:
        return 'Excellent';
      default:
        return '';
    }
  }

  @override
  void dispose() {
    _noteController.dispose();
    super.dispose();
  }
}
